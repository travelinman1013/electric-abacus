rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    // Get user businessId from custom claims
    function userBusinessId() {
      return isAuthenticated() && request.auth.token.businessId != null
        ? request.auth.token.businessId
        : null;
    }

    // Get user role from custom claims
    function userRole() {
      return isAuthenticated() && request.auth.token.role != null
        ? request.auth.token.role
        : null;
    }

    function isOwner() {
      return userRole() == 'owner';
    }

    function isTeamMember() {
      return userRole() == 'teamMember';
    }

    // Check if user belongs to the specified business
    function belongsToBusiness(businessId) {
      return isAuthenticated() && userBusinessId() == businessId;
    }

    // Batch ingredient validation helpers
    // Note: Complex validation with iteration is better handled client-side or in Cloud Functions
    // Security rules should focus on access control, not deep data validation
    function isValidBatchIngredient(data) {
      return data.keys().hasAll(['yield', 'yieldUnit', 'recipeIngredients']) &&
        data.yield is number &&
        data.yield > 0 &&
        data.yieldUnit is string &&
        data.yieldUnit.size() > 0 &&
        data.recipeIngredients is list &&
        data.recipeIngredients.size() > 0;
    }

    function hasValidBatchFields() {
      // Simplified validation: just check for required fields if isBatch is true
      // Full validation of recipe ingredients array is handled client-side
      return !request.resource.data.keys().hasAny(['isBatch']) ||
        !request.resource.data.isBatch ||
        isValidBatchIngredient(request.resource.data);
    }

    // Global User Profiles (not tenant-scoped)
    match /users/{uid} {
      // Users can read their own profile, owners can read all profiles in their business
      allow read: if (isAuthenticated() && request.auth.uid == uid) || isOwner();
      allow create: if isAuthenticated() && request.auth.uid == uid;
      allow update: if isAuthenticated() && request.auth.uid == uid;
      allow delete: if false;

      // User preferences subcollection
      match /preferences/{docId} {
        allow read: if isAuthenticated() && request.auth.uid == uid;
        allow create, update: if isAuthenticated() && request.auth.uid == uid;
        allow delete: if false;
      }
    }

    // Business profiles
    match /businesses/{businessId} {
      allow read: if belongsToBusiness(businessId);
      allow create: if belongsToBusiness(businessId) && isOwner();
      allow delete: if belongsToBusiness(businessId) && isOwner();
      // Allow owners to update customTerminology, but protect core fields like createdAt
      allow update: if belongsToBusiness(businessId) && isOwner() &&
        // Only allow updates to customTerminology field
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['customTerminology']) &&
        // Ensure createdAt is never modified
        (!request.resource.data.keys().hasAll(['createdAt']) || request.resource.data.createdAt == resource.data.createdAt);

      // Ingredients + Versions
      match /ingredients/{ingredientId} {
        allow read: if belongsToBusiness(businessId);
        allow create, update: if belongsToBusiness(businessId) && isOwner() && hasValidBatchFields();
        allow delete: if belongsToBusiness(businessId) && isOwner();

        match /versions/{versionId} {
          allow read: if belongsToBusiness(businessId);
          allow create, update, delete: if belongsToBusiness(businessId) && isOwner();
        }
      }

      // Menu Items + Recipes
      match /menuItems/{menuItemId} {
        allow read: if belongsToBusiness(businessId);
        allow create, update, delete: if belongsToBusiness(businessId) && isOwner();

        match /recipes/{recipeId} {
          allow read: if belongsToBusiness(businessId);
          allow create, update, delete: if belongsToBusiness(businessId) && isOwner();
        }
      }

      // Weeks and nested collections
      match /weeks/{weekId} {
        allow read: if belongsToBusiness(businessId);
        allow create, update: if belongsToBusiness(businessId) && isOwner();
        allow delete: if false;

        match /sales/{docId} {
          allow read: if belongsToBusiness(businessId);
          // Allow create/update for owners and team members
          // Finalization protection is enforced at the week document level (line 143)
          // and in the frontend UI - no need for expensive get() operations here
          allow create: if belongsToBusiness(businessId) && (isOwner() || isTeamMember());
          allow update: if belongsToBusiness(businessId) && (isOwner() || (isTeamMember() && docId == 'daily'));
          allow delete: if false;
        }

        match /inventory/{ingredientId} {
          allow read: if belongsToBusiness(businessId);
          // Allow create/update for owners and team members
          // Finalization protection is enforced at the week document level (line 143)
          // and in the frontend UI - no need for expensive get() operations here
          allow create: if belongsToBusiness(businessId) && (isOwner() || isTeamMember());
          allow update: if belongsToBusiness(businessId) && (isOwner() || isTeamMember());
          allow delete: if false;
        }

        match /costSnapshot/{ingredientId} {
          allow read: if belongsToBusiness(businessId) && isOwner();
          // CostSnapshot is only written during finalization by the owner
          // The finalization transaction handles atomic updates, no need for get() checks here
          allow create, update: if belongsToBusiness(businessId) && isOwner();
          allow delete: if false;
        }

        match /report/{docId} {
          allow read: if belongsToBusiness(businessId) && isOwner();
          // Report is only written during finalization by the owner
          // The finalization transaction handles atomic updates, no need for get() checks here
          allow create, update: if belongsToBusiness(businessId) && isOwner();
          allow delete: if false;
        }
      }
    }
  }
}
