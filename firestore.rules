rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    // Get user businessId from custom claims
    function userBusinessId() {
      return isAuthenticated() && request.auth.token.businessId != null
        ? request.auth.token.businessId
        : null;
    }

    // Get user role from custom claims
    function userRole() {
      return isAuthenticated() && request.auth.token.role != null
        ? request.auth.token.role
        : null;
    }

    function isOwner() {
      return userRole() == 'owner';
    }

    function isTeamMember() {
      return userRole() == 'teamMember';
    }

    // Check if user belongs to the specified business
    function belongsToBusiness(businessId) {
      return isAuthenticated() && userBusinessId() == businessId;
    }

    // Helper for week document access within business context
    function weekDoc(businessId, weekId) {
      return get(/databases/$(database)/documents/businesses/$(businessId)/weeks/$(weekId));
    }

    function weekStatus(businessId, weekId) {
      return weekDoc(businessId, weekId).exists() ? weekDoc(businessId, weekId).data.status : null;
    }

    function isWeekDraft(businessId, weekId) {
      return weekStatus(businessId, weekId) == 'draft';
    }

    function isWeekFinalized(businessId, weekId) {
      return weekStatus(businessId, weekId) == 'finalized';
    }

    // Global User Profiles (not tenant-scoped)
    match /users/{uid} {
      // Users can read their own profile, owners can read all profiles in their business
      allow read: if (isAuthenticated() && request.auth.uid == uid) || isOwner();
      allow create: if isAuthenticated() && request.auth.uid == uid;
      allow update: if isAuthenticated() && request.auth.uid == uid;
      allow delete: if false;
    }

    // Business profiles
    match /businesses/{businessId} {
      allow read: if belongsToBusiness(businessId);
      allow write: if belongsToBusiness(businessId) && isOwner();

      // Ingredients + Versions
      match /ingredients/{ingredientId} {
        allow read: if belongsToBusiness(businessId);
        allow create, update, delete: if belongsToBusiness(businessId) && isOwner();

        match /versions/{versionId} {
          allow read: if belongsToBusiness(businessId);
          allow create, update, delete: if belongsToBusiness(businessId) && isOwner();
        }
      }

      // Menu Items + Recipes
      match /menuItems/{menuItemId} {
        allow read: if belongsToBusiness(businessId);
        allow create, update, delete: if belongsToBusiness(businessId) && isOwner();

        match /recipes/{recipeId} {
          allow read: if belongsToBusiness(businessId);
          allow create, update, delete: if belongsToBusiness(businessId) && isOwner();
        }
      }

      // Weeks and nested collections
      match /weeks/{weekId} {
        allow read: if belongsToBusiness(businessId);
        allow create, update: if belongsToBusiness(businessId) && isOwner();
        allow delete: if false;

        match /sales/{docId} {
          allow read: if belongsToBusiness(businessId);
          // Allow create for owners without week status check (week may not exist yet in transaction)
          // Allow update only if week is not finalized
          allow create: if belongsToBusiness(businessId) && (isOwner() || isTeamMember());
          allow update: if belongsToBusiness(businessId) && !isWeekFinalized(businessId, weekId) && (isOwner() || (isTeamMember() && docId == 'daily'));
          allow delete: if false;
        }

        match /inventory/{ingredientId} {
          allow read: if belongsToBusiness(businessId);
          // Allow create for owners and team members without week status check (week may not exist yet)
          // Allow update only if week is not finalized
          allow create: if belongsToBusiness(businessId) && (isOwner() || isTeamMember());
          allow update: if belongsToBusiness(businessId) && !isWeekFinalized(businessId, weekId) && (isOwner() || isTeamMember());
          allow delete: if false;
        }

        match /costSnapshot/{ingredientId} {
          allow read: if belongsToBusiness(businessId) && isOwner();
          allow create, update: if belongsToBusiness(businessId) && isOwner() && !isWeekFinalized(businessId, weekId);
          allow delete: if false;
        }

        match /report/{docId} {
          allow read: if belongsToBusiness(businessId) && isOwner();
          allow create, update: if belongsToBusiness(businessId) && isOwner() && !isWeekFinalized(businessId, weekId);
          allow delete: if false;
        }
      }
    }
  }
}
